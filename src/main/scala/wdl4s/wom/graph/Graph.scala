package wdl4s.wom.graph

import lenthall.validation.ErrorOr.ErrorOr

trait Graph {
  /**
    * The GraphNodes in this Graph.
    */
  def nodes: Set[_ <: GraphNode]
  /**
    * Inputs that must be available before this graph node can be run.
    */
  def inputPorts: Set[GraphNodePort.InputPort]

  /**
    * Outputs that are generated by this GraphNode
    */
  def outputPorts: Set[GraphNodePort.OutputPort]

  /**
    * Create a new graph with named (unsatisfied) inputs mapped to the specified input ports.
    * @param inputs The inputs
    * @return A new graph containing the requested linkings
    */
  def withSuppliedInputs(inputs: Map[String, GraphNodePort.InputPort]): ErrorOr[Graph]
}

object Graph {
  def fromNodes(nodes: Set[_ <: GraphNode]): Graph = {
    // TODO: Scan the nodes for unsatisfied inputs.
    // TODO: Create CompositeGraph sockets for every input
    // TODO: Generate the composite graph by connecting the

    CompositeGraph(nodes)
  }

  /**
    * Join graphs together by linking outputs of gFirst, by name, to inputs of gSecond
    * @param gFirst The first graph
    * @param connections The set of connections
    * @param gSecond The second graph
    * @return A new graph representing the connection of these two graphs
    */
  // TODO: Implement (using Graph.withSuppliedInputs?)
  def joinGraphs(gFirst: Graph, connections: Map[String, String], gSecond: Graph): Graph = ???
}
